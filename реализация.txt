3.2.1 Изменение учётной записи
Функция "изменение учётной записи" (1) в исходном коде реализована функциями change_name, request_password_restoration_code и restore_password.
Функция change_name находится в модуле src.routers.users.views.py. Она принимает HTTP PATCH запрос по пути "/users/{user_id}/name/" и изменяет имя пользователя на новое, полученное из тела запроса.
Функция request_password_restoration_code находится в модуле src.routers.auth.views.py. Она принимает HTTP POST запрос по пути "/auth/restore-password/request/" c адресом электронной почты пользователя в параметрах строки запроса, создаёт код подтверждения смены пароля в базе данных и отправляет письмо по адресу электронной почты со ссылкой на страницу смены пароля.
Функция restore_password находится в модуле src.routers.auth.views.py. Она принимает HTTP POST запрос по пути "/auth/restore-password/confirm/" с кодом подтверждения и новым паролем, проверяет существование полученного кода и изменяет хранимый в базе данных хэш пароля пользователя на хэш полученного нового пароля.
3.2.2 Просмотр открытых сессий
Функция "просмотр открытых сессий" (2) в исходном коде реализована функцией get_sessions. Данная функция находится в модуле src.routers.sessions.views.py. Она принимает HTTP GET запрос по пути "/sessions/" и возвращает список всех открытых сессий текущего пользователя из базы данных (сессий, у которых значение в столбце closed_at равняется NULL).
3.2.3 Завершение открытых сессий
Функция "завершение открытых сессий" (3) в исходном коде реализована функцией close_sessions. Данная функция находится в модуле src.routers.sessions.views.py. Она принимает HTTP POST запрос по пути "/sessions/close/" и закрывает все открытые сессии текущего пользователя (устанавливает в столбец closed_at текущее время сервера).
3.2.4 Изменение списка исходных статей
Функция "изменение списка исходных статей" (4) в исходном коде реализована функциями upload_article, update_article, delete_article. Данные функции находятся в модуле src.routers.articles.views.py.
Функция upload_article находится в модуле src.routers.users.views.py. Она принимает HTTP POST запрос по пути "/articles/" и добавляет в базу данных строку с информацией об исходной статье, десериализованной из тела запроса. Значение столбца user_id берётся из маркера доступа пользователя, передаваемого через Cookie.
Функция update_article находится в модуле src.routers.users.views.py. Она принимает HTTP PUT запрос по пути "/articles/{article_id}/", проверяет принадлежность исходной статьи текущему пользователю по идентификатору статьи, полученному из пути запроса, и обновляет запись о статье согласно данным, десериализованным из тела запроса.
Функция delete_article находится в модуле src.routers.users.views.py. Она принимает HTTP DELETE запрос по пути "/articles/{article_id}/", проверяет принадлежность исходной статьи текущему пользователю по идентификатору статьи, полученному из пути запроса, и удаляет исходную или переведённую статью по идентификатору.
3.2.5 Изменение списка переведённых статей
Функция "изменение списка переведённых статей" (5) в исходном коде реализована функциями delete_article, рассмотренной выше, и create_translation.
Функция create_translation находится в модуле src.routers.translation.views.py. Она принимает HTTP POST запрос по пути "/translation/" и отправляет в Kafka сообщение подписчику-переводчику о запуске перевода. Тело запроса должно содержать идентификатор статьи, массив идентификаторов конечных языков, на которые требуется выполнить перевод, а также идентификаторы стиля и модели перевода.
3.2.6 Изменение списка жалоб на переводы своих статей
Функция "изменение списка жалоб на переводы своих статей" (6) в исходном коде реализована функциями create_report, update_report, update_report_status.
Функция create_report находится в модуле src.routers.reports.views.py. Она принимает HTTP POST запрос по пути "/articles/{article_id}/report/", проверяет принадлежность переведённой статьи текущему пользователю по идентификатору статьи, полученному из пути запроса, и добавляет в базу данных строку с информацией о жалобе (текст и идентификатор причины жалобы из тела запроса).
Функция create_report находится в модуле src.routers.reports.views.py. Она принимает HTTP PUT запрос по пути "/articles/{article_id}/report/", проверяет принадлежность переведённой статьи текущему пользователю и обновляет информацию о жалобе (текст и причина жалобы в теле запроса).
Функция create_report находится в модуле src.routers.reports.views.py. Она принимает HTTP PATCH запрос по пути "/articles/{article_id}/report/status/", проверяет, имеет ли пользователь право устанавливать жалобе новый статус, и обновляет статус жалобы по идентификатору статьи.
3.2.7 Просмотр своих уведомлений
Функция "просмотр своих уведомлений" (7) в исходном коде реализована функцией get_notifications_list. Данная функция находится в модуле src.routers.notifications.views.py. Она принимает HTTP GET запрос по пути "/notifications/" и возвращает список непрочитанных (имеющих в столбце read_at значение NULL) уведомлений пользователя из базы данных.
3.2.8 Изменение списка комментариев к жалобам на переводы своих статей
Функция "изменение списка комментариев к жалобам на переводы своих статей" (8) включает в себя ровно две функции: "получение списка комментариев к жалобе" (9) и "создание комментария" (10).
Функция "получение списка комментариев к жалобе" (9) в исходном коде реализована функцией get_comments. Данная функция находится в модуле src.routers.reports.views.py. Она принимает HTTP GET запрос по пути "/articles/{article_id}/report/comments/", проверяет, имеет ли право текущий пользователь получать список комментариев к этой жалобе по идентификатору статьи, полученному из пути запроса, и возвращает список комментариев к жалобе из базы данных.
Функция "создание комментария" (10) в исходном коде реализована функцией create_comment. Данная функция находится в модуле src.routers.reports.views.py. Она принимает HTTP POST запрос по пути "/articles/{article_id}/report/comments/" создаёт комментарий к жалобе по идентификатору статьи, к которой была оставлена жалоба.
3.2.9 Изменение списка настроек переводчика
Функция "изменение списка настроек переводчика" (11) в исходном коде реализована функциями create_config, update_config и delete_config.
Функция create_config находится в модуле src.routers.config.views.py. Она принимает HTTP POST запрос по пути "/configs/", проверяет, занято ли название конфигурации переводчика для данного пользователя, и создаёт новую строку в базе данных с полученным названием, идентификатором модели перевода и стиля перевода, а также массивом идентификаторов конечных языков.
Функция create_config находится в модуле src.routers.config.views.py. Она принимает HTTP PUT запрос по пути "/configs/{config_id}/", проверяет принадлежность конфигурации текущему пользователю и занято ли новое название конфигурации переводчика для данного пользователя, и обновляет строку в базе данных согласно десериализованным из тела запроса данным.
Функция create_config находится в модуле src.routers.config.views.py. Она принимает HTTP DELETE запрос по пути "/configs/{config_id}/", проверяет принадлежность конфигурации текущему пользователю и удаляет конфигурацию по её идентификатору.
3.2.10 Регистрация
Функция "регистрация" (12) в исходном коде реализована функцией register. Данная функция находится в модуле src.routers.auth.views.py. Она принимает HTTP POST запрос по пути "/auth/register/", проверяет, занят ли адрес электронной почты, и создаёт нового пользователя по имени, адресу электронной почты и паролю, полученным из тела запроса. Значение столбца email_verified устанавливается в false, и пользователь должен дополнительно подтвердить свой адрес электронной почты.
3.2.11 Аутентификация
Функция "аутентификация" (13) в исходном коде реализована функцией login. Данная функция находится в модуле src.routers.auth.views.py. Она принимает HTTP POST запрос по пути "/auth/login/", проверяет существование пользователя с полученными из тела запроса адресом электронной почты и паролем и аутентифицирует пользователя: закрывает открытые сессии по IP-адресу и user agent, полученными из заголовков запроса, создаёт новую сессию пользователя и возвращает пару маркеров для доступа к ресурсам и обновления маркеров.
3.2.12 Изменение списка открытых жалоб
Функция "изменение списка открытых жалоб" (14) в исходном коде реализована функцией update_report_status. Данная функция находится в модуле src.routers.reports.views.py и была рассмотрена выше.
3.2.13 Создание комментариев для жалоб
Функция "создание комментариев для жалоб" (15) в исходном коде реализована функцией create_comment. Данная функция находится в модуле src.routers.reports.views.py и была рассмотрена выше.
3.2.14 Просмотр статистики жалоб
Функция "просмотр статистики жалоб" (16) в исходном коде реализована функциями get_models_stats и get_prompts_stats.
Функция get_models_stats находится в модуле src.routers.analytics.views.py. Она принимает HTTP GET запрос по пути "/analytics/models-stats/" и возвращает статистику жалоб по всем моделям перевода в базе данных: сколько было подано жалоб на переводы по каждой модели и какие статусы у этих жалоб на данный момент.
Функция get_prompts_stats находится в модуле src.routers.analytics.views.py. Она принимает HTTP GET запрос по пути "/analytics/prompts-stats/" и аналогична функции get_models_stats, но возвращает статистику по стилям перевода, а не моделям перевода.
3.2.15 Изменение списка стилей перевода
Функция "изменение списка стилей перевода" (17) в исходном коде реализована функциями create_prompt, update_prompt и delete_prompt.
Функция create_prompt находится в модуле src.routers.prompts.views.py. Она принимает HTTP POST запрос по пути "/prompts/", проверяет, занято ли название стиля перевода существующей строкой в базе данных, и добавляет новый стиль перевода в базу данных по названию и тексту, полученным из тела запроса.
Функция update_prompt находится в модуле src.routers.prompts.views.py. Она принимает HTTP PUT запрос по пути "/prompts/{prompt_id}/", проверяет, занято ли новое название стиля перевода, и обновляет строку в базе данных по идентификатору стиля перевода, полученному из пути запроса, согласно данным из тела запроса.
Функция delete_prompt находится в модуле src.routers.prompts.views.py. Она принимает HTTP DELETE запрос по пути "/prompts/{prompt_id}/", проверяет существование стиля перевода по идентификатору из пути запроса и удаляет стиль по идентификатору.
3.2.16 Изменение списка моделей перевода
Функция "изменение списка моделей перевода" (18) в исходном коде реализована функциями create_model, update_model и delete_model.
Функция create_model находится в модуле src.routers.models.views.py. Она принимает HTTP POST запрос по пути "/models/", проверяет, занято ли название модели перевода, и добавляет в базу данных строку с отображаемым названием, внутренним названием и провайдером, полученным из тела запроса.
Функция update_model находится в модуле src.routers.models.views.py. Она принимает HTTP PUT запрос по пути "/models/{model_id}/", проверяет, занято ли новое название модели перевода, и обновляет строку в базе данных по идентификатору модели, полученному из пути запроса, согласно данным, полученным из тела запроса.
Функция delete_model находится в модуле src.routers.models.views.py. Она принимает HTTP DELETE запрос по пути "/models/{model_id}/" и удаляет модель перевода из базы данных по её идентификатору, полученному из тела запроса.
3.2.17 Изменение списка пользователей
Функция "изменение списка пользователей" (19) в исходном коде реализована функциями create_user, update_user и delete_user.
Функция create_user находится в модуле src.routers.users.views.py. Она принимает HTTP POST запрос по пути "/users/" и создаёт пользователя с заданным именем, адресом электронной почты, паролем и ролью. Эти данные десериализуются из тела запроса.
Функция update_user находится в модуле src.routers.users.views.py. Она принимает HTTP PUT запрос по пути "/users/{user_id}/" и обновляет строку в базы данных по идентификатору пользователя, полученному из пути запроса, согласно данным, полученным из тела запроса.
Функция delete_user находится в модуле src.routers.users.views.py. Она принимает HTTP DELETE запрос по пути "/users/{user_id}/" и удаляет пользователя по идентификатору, полученному из пути запроса.
Функции "создание пользователей" (20), "создание модераторов" (21) и "создание администраторов" (22) в исходном коде реализована функцией src.routers.users.views.create_user, рассмотренной выше.
